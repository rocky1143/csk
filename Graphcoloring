class Graph():
  def __init__(self,vertices):
    self.v = vertices
    self.graph = [[0 for column in range(vertices)] for row in range(vertices)]
  def isSafe(self,v,colour,c):
    for i in range(self.v):
      if self.graph[v][i] == 1 and colour[i] == c:
        return False
    return True
  def graphColourUtil(self,m,colour,v):
    if v == self.v:
      return True
    for c in range(1,m+1):
      if self.isSafe(v,colour,c)==True:
        colour[v]=c
        if self.graphColourUtil(m,colour,v+1) == True:
          return True
        colour[v]=0
  def graphColouring(self,m):
    colour = [0]*self.v
    if self.graphColourUtil(m,colour,0)==None:
      return False
    print("Solution exist and following are the assigned colours : ")
    for c in colour:
      print(c,end=' ')
v = int(input("Enter number of vertices : "))
g = Graph(v)
print("Enter the adjacency matrix : ")
g.graph = [[int(x) for x in input().split()] for b in range(v)]
m = 3
g.graphColouring(m)


/*
OUTPUT :
     
Enter number of vertices : 4
Enter the adjacency matrix : 
0 1 1 1
1 0 1 0
1 1 0 1
1 0 1 0
Solution exist and following are the assigned colours : 
1 2 3 2 

*/
