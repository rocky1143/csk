from queue import PriorityQueue
def a_star(v,l,goal,h):
  open_list=PriorityQueue()
  open_list.put((13,0))
  flag=0
  path=[]
  while not(open_list.empty()) and flag==0:
    t=open_list.get()
    curr_cost=t[0]
    curr=t[1]
    path.append(curr)
    if(curr==goal):
      flag=1
      break
    for i in range(v):
      if l[curr][i]!=-1:
        cost=l[curr][i]
        open_list.put((curr_cost-h[curr]+cost+h[i],i))
  if flag==1:
    print('Goal Node is found .The Path is : ',path)
  else :
    print('Goal Node is not found')
    
v=int(input('Enter the number of Nodes : '))
l=[[-1 for i in range(v)] for j in range(v)]
edge=int(input('Enter no of edges : '))
for i in range(edge):
  print('Enter the start ,end , g(n) (Cost) of edge -',i+1)
  start, end, cost=[int(x) for x in input().split()]
  l[start][end]=cost
print('Adjacency matrix : ')
for i in range(v):
  for j in range(v):
    print(l[i][j],end=' ')
  print()
h={}
for i in range(v):
  print('Enter h(n) for Node',i+1)
  x=int(input())
  h[i]=x
goal=int(input('Enter the goal node :'))
a_star(v,l,goal,h)



/*
Output -

Enter the number of Nodes : 10
Enter no of edges : 9
Enter the start ,end , g(n) (Cost) of edge - 1
0 1 3
Enter the start ,end , g(n) (Cost) of edge - 2
0 2 2

Enter the start ,end , g(n) (Cost) of edge - 3
1 3 4
Enter the start ,end , g(n) (Cost) of edge - 4
1 4 1
Enter the start ,end , g(n) (Cost) of edge - 5
2 5 3
Enter the start ,end , g(n) (Cost) of edge - 6
2 6 1
Enter the start ,end , g(n) (Cost) of edge - 7
5 7 5
Enter the start ,end , g(n) (Cost) of edge - 8
6 8 2
Enter the start ,end , g(n) (Cost) of edge - 9
6 9 3
Adjacency matrix :
-1 3 2 -1 -1 -1 -1 -1 -1 -1
-1 -1 -1 4 1 -1 -1 -1 -1 -1
-1 -1 -1 -1 -1 3 1 -1 -1 -1
-1 -1 -1 -1 -1 -1 -1 -1 -1 -1
-1 -1 -1 -1 -1 -1 -1 -1 -1 -1
-1 -1 -1 -1 -1 -1 -1 5 -1 -1
-1 -1 -1 -1 -1 -1 -1 -1 2 3
-1 -1 -1 -1 -1 -1 -1 -1 -1 -1
-1 -1 -1 -1 -1 -1 -1 -1 -1 -1
-1 -1 -1 -1 -1 -1 -1 -1 -1 -1
Enter h(n) for Node 1
13
Enter h(n) for Node 2
12
Enter h(n) for Node 3
4
Enter h(n) for Node 4
7
Enter h(n) for Node 5
3
Enter h(n) for Node 6
8
Enter h(n) for Node 7
2
Enter h(n) for Node 8
4
Enter h(n) for Node 9
9
Enter h(n) for Node 10
0
Enter the goal node :7
Goal Node is found .The Path is : [0, 2, 6, 9, 5, 7]
*/
