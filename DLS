from collections import defaultdict
class Graph:
    def __init__(self,vertices):
        self.V = vertices
        self.graph = defaultdict(list)
    def addEdge(self,u,v):
        self.graph[u].append(v)
    def DLS(self,src,target,maxDepth):
        print(src)
        if src == target : return True
        if maxDepth <= 0 : return False
        for i in self.graph[src]:
                if(self.DLS(i,target,maxDepth-1)):
                    return True
        return False
    def IDDFS(self,src, target, maxDepth):
            if (self.DLS(src, target, maxDepth)):
                return True
            return False
print("Enter number of Vertices : ")
ver = int(input())
print("Enter number of edges : ")
e = int(input())
g = Graph (ver);
print("Enter edges : ")
for i in range(e):
    x,y = [int(x) for x in (input().split())]
    g.addEdge(x,y)
print("The Path is : ")
target = 6; maxDepth = 3; src = 0
if g.IDDFS(src, target, maxDepth) == True:
    print ("Target is reachable from source " +
        "within max depth")
else :
    print ("Target is NOT reachable from source " +
        "within max depth")
        
        
      
      
      
/*
OUTPUT :         
Enter number of Vertices : 
7
Enter number of edges : 
6
Enter edges : 
0 1
0 2
1 3
1 4
2 5
2 6
The Path is : 
0
1
3
4
2
5
6
Target is reachable from source within max depth
*/
